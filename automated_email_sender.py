import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import schedule
import time
import datetime

class EmailAutomator:
        ''' Class variables'''
        sender_email_id = "rudra.writ.automated.email@gmail.com"    #sender email address
        password = "qsmyegnqdmkqzvzw"    #password token generated by gmail (more info in 'readme')
        receiver_email_id = ["rudrawrit0010@gmail.com", "rudrawrit0001@gmail.com"]    #receiver email addresses
        reports_directory = "D:/email_sender/Reports"    #Path of the directory where the reports are located
        reports_path = "D:/email_sender/Reports/"    #Path to the reports
        log_file_path = "D:/email_sender/log.txt"    #Path to the log file
        
        def __init__(self):
               pass
               
        # Method to compose the email
        def email_composer(self):
                
                message = MIMEMultipart() #creating a mimemultipart object to construct the email
                message['From'] = EmailAutomator.sender_email_id
                message['To'] = ', '.join(EmailAutomator.receiver_email_id)
                message['Subject'] = "Report of the day"
                
                body = '''
                Dear Sir/Ma'am,

                Please find the attached reports for today.

                Sincerely,
                XYZ solutions

                *** THIS IS AN AUTOMATED MAIL. PLEASE DO NOT REPLY. ***

                '''
                message.attach(MIMEText(body, 'plain'))    #attaching the email body to the message object

                for report in os.listdir(EmailAutomator.reports_directory):    #accessing the files in the reports directory with os module and iterating over them
                    file_path = EmailAutomator.reports_path + report    #creating the file path
                    filename = report 
                    file = open(file_path, 'rb')    #opening the file
                    attached_file = MIMEBase('application', 'octate-stream')    #creating a mimebase object
                    attached_file.set_payload((file).read())    #reading the file and setting the data to the mimebase object
                    encoders.encode_base64(attached_file)    #encoding the attached file to base64
                    attached_file.add_header('Content-Disposition', 'attachment', filename=filename)    #adding file name
                    message.attach(attached_file)    #attaching the file to the message object
               

                return message    #returning the message object
        
        #method to send email
        def email_sender(self):
                
                current_time = str(datetime.datetime.now())    #getting the current time (used for logging the status)
                message = self.email_composer()    #creating an email composer instance

                try:
                    server = smtplib.SMTP_SSL('smtp.gmail.com', 465)    #Initializing connection using the smtplib library to connect to the email server (gmail is used here)
                    server.login(EmailAutomator.sender_email_id, EmailAutomator.password)    #login with the predefined credentials
                    message = message.as_string()    #converting the message object to string
                    log_file = open(EmailAutomator.log_file_path, 'a')    #opening the log file
                    for receiver in EmailAutomator.receiver_email_id:    #iterating over the receiver email ids 
                            
                            server.sendmail(EmailAutomator.sender_email_id, receiver, message)    #sending the automated email to each mail id
                            log_file.write( current_time +" : "+"The reporting email have been sent successfully to -----> " + " " + receiver +"\n")    #if everything went well,  update log file with success message
                            
                    log_file.close()    #close the log file
                    server.quit()     #quit the email server

                except:
                    log_file = open(EmailAutomator.log_file_path, 'a')
                    log_file.write( current_time +" : " + "Could not connect to the email server. Please check the login credentials" +"\n" )    #In case of any error update the log file with error message
                    log_file.close()
                    server.quit()
                
                           

#schedule.every().day.at("00:00").do(EmailAutomator.email_sender)
if __name__ == "__main__":
      
      automator = EmailAutomator()
      schedule.every(1).minutes.do(automator.email_sender)    #using the schedule library to automate the email sending process at the specified time of the day "00:00"
      print( " -------------The automated email service have started. Press 'CTRL+C' to terminate the service.-------------- ")
      while True:
         schedule.run_pending() #running the scheduler in an infinite loop when the program is launched
         time.sleep(1)
      



